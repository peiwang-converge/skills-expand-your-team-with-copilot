name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  workflow_dispatch:

env:
  TF_VERSION: '1.5.7'
  CHECKOV_VERSION: '3.0.0'

jobs:
  security-scan:
    name: Security Scan with Checkov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Checkov
        run: |
          pip install checkov==${{ env.CHECKOV_VERSION }}

      - name: Run Checkov scan
        id: checkov
        run: |
          echo "🔍 Running Checkov security scan..."
          checkov -d terraform/ --framework terraform --output cli --output sarif --output-file-path console,checkov-results.sarif
        continue-on-error: true

      - name: Upload Checkov results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkov-security-scan
          path: checkov-results.sarif

      - name: Comment Checkov results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const checkovOutput = `### 🔍 Checkov Security Scan Results
            
            Checkov security scan has been completed. Please review the results in the workflow logs.
            
            **Note:** This scan is informational only and does not block the pipeline.
            
            📊 View detailed results in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: checkovOutput
            });

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        environment: [dev, qa, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=skills-copilot/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=us-west-2"

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="environments/${{ matrix.environment }}.tfvars" \
            -out="${{ matrix.environment }}.tfplan"

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/${{ matrix.environment }}.tfplan

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main'
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=skills-copilot/dev/terraform.tfstate" \
            -backend-config="region=us-west-2"

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="environments/dev.tfvars" \
            -out="dev.tfplan"

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve dev.tfplan

      - name: Terraform Output
        working-directory: terraform
        run: |
          terraform output -json > dev-outputs.json

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-dev
          path: terraform/dev-outputs.json

  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main'
    environment: qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=skills-copilot/qa/terraform.tfstate" \
            -backend-config="region=us-west-2"

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="environments/qa.tfvars" \
            -out="qa.tfplan"

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve qa.tfplan

      - name: Terraform Output
        working-directory: terraform
        run: |
          terraform output -json > qa-outputs.json

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-qa
          path: terraform/qa-outputs.json

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-qa
    if: github.ref == 'refs/heads/main'
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=skills-copilot/prod/terraform.tfstate" \
            -backend-config="region=us-west-2"

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="environments/prod.tfvars" \
            -out="prod.tfplan"

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve prod.tfplan

      - name: Terraform Output
        working-directory: terraform
        run: |
          terraform output -json > prod-outputs.json

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-prod
          path: terraform/prod-outputs.json

      - name: Deployment Summary
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "✅ Dev environment: Deployed"
          echo "✅ QA environment: Deployed (with approval)"
          echo "✅ Prod environment: Deployed (with approval)"
          echo "🔍 Security scan: Completed (non-blocking)"